name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest
    env:
      DB_CONNECTION: sqlite
      DB_DATABASE: ${{ github.workspace }}/database/database.sqlite
      CACHE_STORE: file
      CACHE_DRIVER: file
      SESSION_DRIVER: file
      QUEUE_CONNECTION: sync
      ADMIN_EMAIL: "admin@cafe.pos"
      ADMIN_NAME: "Administrator"
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}  # Set this secret in your repository settings.

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: curl, gd, intl, mbstring, exif, mysqli, pcntl, pdo, pdo_mysql, pdo_sqlite, sqlite3, zip, opcache
          ini-values: opcache.enable=1, opcache.memory_consumption=128, opcache.max_accelerated_files=10000, post_max_size=256M, upload_max_filesize=256M, memory_limit=512M, max_execution_time=180
          tools: composer, pint, phpstan, phpunit
          coverage: none

      - name: Get composer cache directory
        id: composer-cache-dir
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        id: composer-cache # use this to check for `cache-hit` ==> if: steps.composer-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.composer-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - name: Cache npm dependencies
        uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install npm dependencies
        run: npm ci

      - name: Prepare the application
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate

      - name: Clear Config & Cache
        run: |
          php artisan config:clear
          php artisan cache:clear

      - name: Run Migration
        run: php artisan migrate -v

      - name: Seed Database
        run: |
          php artisan db:seed --no-interaction
          php artisan db:seed --class=AdminUserSeeder --no-interaction

      - name: Link storage
        run: php artisan storage:link
